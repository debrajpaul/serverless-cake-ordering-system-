service: serverless-cake-ordering-system

plugins:
    - serverless-pseudo-parameters

provider:
    name: aws
    runtime: nodejs10.x

    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:PutItem
              - dynamodb:GetItem
          Resource:
              - arn:aws:dynamodb:#{AWS::Region}:#{AWS::AccountId}:table/ordersTable
        - Effect: Allow
          Action:
              - kinesis:PutRecord
          Resource:
              - arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-events
        - Effect: Allow
          Action:
              - ses:SendEmail
          Resource:
              - "*"
          Condition:
              StringEquals:
                  ses:FromAddress:
                      - debraj@ficuslot.com
        - Effect: Allow
          Action:
              - sqs:SendMessage
          Resource:
              - arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:deliveryServiceQueue
              - arn:aws:sqs:#{AWS::Region}:#{AWS::AccountId}:customerServiceQueue

functions:
    createOrder:
        handler: handler.createOrder
        events:
            - http:
                  path: /order
                  method: post
        environment:
            orderTableName: ordersTable
            orderStreamName: order-events
    orderFulfillment:
        handler: handler.orderFulfillment
        events:
            - http:
                  path: /order/fulfill
                  method: post
        environment:
            orderTableName: ordersTable
            orderStreamName: order-events
    notifyExternlParties:
        handler: handler.notifyExternlParties
        events:
            - stream:
                  arn: arn:aws:kinesis:#{AWS::Region}:#{AWS::AccountId}:stream/order-events
        environment:
            region: ${self:provider.region}
            cakeProducerEmail: ahmedsu868@gmail.com
            orderingSystemEmail: debraj@ficuslot.com
            deliveryCompanyQueue:
                Ref: deliveryServiceQueue
            orderTableName: ordersTable
    notifyDeliveryCompany:
        handler: handler.notifyDeliveryCompany
        events:
            - sqs:
                  arn:
                      Fn::GetAtt:
                          - deliveryServiceQueue
                          - Arn
                  batchSize: 1
    orderDelivered:
        handler: handler.orderDelivered
        events:
            - http:
                  path: /order/delivered
                  method: post
        environment:
            region: ${self:provider.region}
            customerServiceQueue:
                Ref: customerServiceQueue
            orderTableName: ordersTable
    notifyCustomerService:
        handler: handler.notifyCustomerService
        events:
            - sqs:
                  arn:
                      Fn::GetAtt:
                          - customerServiceQueue
                          - Arn
                  batchSize: 1

resources:
    Resources:
        orderEventsStream:
            Type: AWS::Kinesis::Stream
            Properties:
                Name: order-events
                ShardCount: 1
        orderTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ordersTable
                AttributeDefinitions:
                    - AttributeName: "orderId"
                      AttributeType: "S"
                KeySchema:
                    - AttributeName: "orderId"
                      KeyType: "HASH"
                BillingMode: PAY_PER_REQUEST
        deliveryServiceQueue:
            Type: AWS::SQS::Queue
            Properties:
                QueueName: deliveryServiceQueue
        customerServiceQueue:
            Type: AWS::SQS::Queue
            Properties:
                QueueName: customerServiceQueue
